<?php

namespace Tests\ESET\Shopping\Coupon;

use ESET\Shopping\Coupon\FixedCouponCodeGenerator;
use ESET\Shopping\Coupon\ValueCoupon;
use ESET\Shopping\Coupon\ValueCouponFactory;
use ESET\Shopping\MoneyParser;
use ESET\Shopping\Order;
use Money\Money;
use PHPUnit\Framework\TestCase;

final class ValueCouponFactoryTest extends TestCase
{
    public function testGenerateCouponWithAutoGeneratedCode(): void
    {
        $factory = new ValueCouponFactory(new MoneyParser(), new FixedCouponCodeGenerator());
        $coupon = $factory->createCoupon(['discount' => 'EUR 2000']);

        $this->assertInstanceOf(ValueCoupon::class, $coupon);
        $this->assertSame('H4RY5N9B', $coupon->getCode());

        $discountedAmount = $coupon->apply(new Order(Money::EUR('5000')));

        $this->assertEquals(Money::EUR('3000'), $discountedAmount);
    }

    public function testGenerateCouponWithCustomCode(): void
    {
        $factory = new ValueCouponFactory(new MoneyParser(), new FixedCouponCodeGenerator());
        $coupon = $factory->createCoupon(['discount' => 'EUR 2000', 'code' => 'ABCDEF99']);

        $this->assertInstanceOf(ValueCoupon::class, $coupon);
        $this->assertSame('ABCDEF99', $coupon->getCode());

        $discountedAmount = $coupon->apply(new Order(Money::EUR('5000')));

        $this->assertEquals(Money::EUR('3000'), $discountedAmount);
    }
}
