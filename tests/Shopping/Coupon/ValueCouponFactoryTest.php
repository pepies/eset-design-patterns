<?php

namespace Tests\ESET\Shopping\Coupon;

use ESET\Shopping\Coupon\Factory\ValueCouponAbstractFactory;
use ESET\Shopping\Coupon\FixedCouponCodeGenerator;
use ESET\Shopping\Coupon\ValueCoupon;
use ESET\Shopping\Order;
use Money\Money;
use PHPUnit\Framework\TestCase;

final class ValueCouponFactoryTest extends TestCase
{
    private $factory;

    protected function setUp(): void
    {
        $factory = new ValueCouponAbstractFactory(new FixedCouponCodeGenerator(), [
            'default_coupon_code_length' => 10,
        ]);

        $this->factory = $factory->createCouponFactory();
    }

    public function testGenerateCouponWithAutoGeneratedCode(): void
    {
        $coupon = $this->factory->createCoupon(['discount' => 'EUR 2000']);

        $this->assertInstanceOf(ValueCoupon::class, $coupon);
        $this->assertSame('H4RY5N9B', $coupon->getCode());

        $discountedAmount = $coupon->apply(new Order(Money::EUR('5000')));

        $this->assertEquals(Money::EUR('3000'), $discountedAmount);
    }

    public function testGenerateCouponWithCustomCode(): void
    {
        $coupon = $this->factory->createCoupon(['discount' => 'EUR 2000', 'code' => 'ABCDEF99']);

        $this->assertInstanceOf(ValueCoupon::class, $coupon);
        $this->assertSame('ABCDEF99', $coupon->getCode());

        $discountedAmount = $coupon->apply(new Order(Money::EUR('5000')));

        $this->assertEquals(Money::EUR('3000'), $discountedAmount);
    }
}
